A ob = new A();
ob.display();

 --------
 
new A().display();    <-------   Anonymous object

Anonymous class can be created inside a class(inner class).

----------------------------
Example : 

interface Product{
	String p_name = "Split AC";
	int price  = 42000;
	void details();
}

class MyClass1 implement Product{
	
	void  details(){
		System.out.println("Product name: "+p_name);
		System.out.println("Price: "+price);	
	}
	
}


class Demo{

	public static void main(String args[]){
		MyClass1 ob = new MyClass1();
		ob.details();
	}

}

----------------------------
Example:

interface product{
	String p_name = "Split AC";
	int price  = 42000;
	void details();
}

class MyClass1 implement product{
	
	/*
	public, because methods in interface are by default public 
	and methods in class are by default 'default' type.
	Hence we need to declare public while overriding methods.
	*/
	
	public void details(){
		System.out.println("Product name: "+p_name);
		System.out.println("Price: "+price);	
	}
	
}


class Demo{

	public static void main(String args[]){
		Product ob = new MyClass1();
		ob.details();
	}

}
-----------------------------
Another Anonymous class example (inner class):

class Demo2{

	public static void main(String args[]){
		Product ob = new Product(){
			
			/*
			public because methods in interface are by default public 
			and methods in class are by default 'default' type.
			Hence we need to declare public while overriding methods.
			*/
			
			public void details(){
				System.out.println("Product name: "+p_name);
				System.out.println("Price: "+price);	
			}
		
		};
		ob.details();
	}	

}
--------------------------------
Reflection:

Reflects the properties of one class to another

3 ways:
	
	1. Class.forName();
		--> not suitable for primitive datatypes
		
		-------------------------
		
		import java.lang.reflect.*;
		
		class MyClass2{
		}
		
		class Demo2{

			public static void main(String args[]) throws ClassNotFoundException{
			Class c = Class.forName("MyClass2"); // creating instance of class 'Class'
			System.out.println(c.getName());
			}
			
		}
		------------------------
		
	2. getClass();
		
		------------------------
		 class MyClass3{}
		 
		 class Demo3{
		 
		 	void printName(Object ob){
		 		Class c = ob.getClass();
		 		System.out.println(c.getName());	
		 	}		 
		 }
		 
		 class Test{
		 
		 	public static void main(String args[]) throws ClassNotFoundException{
				MyClass2 ob1 = new MyClass2();
				Demo3 ob2 = new Demo3();
				ob2.printName(ob1);
			}
		 
		 }
		 -------------------------
		 
	 3. .class;
	 
	 	import java.lang.reflect.*;

        class Demo4{
	 
	 		public static void main(String args[]) throws ClassNotFoundException{
				Class c1 = Boolean.class;
				System.out.println(c1.getName());
				Class c2 = Integer.class;
				System.out.println(c2.getName());	
				Class c3 = Demo4.class;
				System.out.println(c3.getName());	
		 	}	 
		 }


